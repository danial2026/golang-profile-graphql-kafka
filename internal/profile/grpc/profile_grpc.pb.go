// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

type CreateAccountRequest struct {
	ID       string `json:"id"`
	Email    string `json:"email"`
	Username string `json:"username"`
}

type CreateAccountResponse struct {
	ID       string `json:"id"`
	Email    string `json:"email"`
	Username string `json:"username"`
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcServerClient is the client API for GrpcServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcServerClient interface {
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
}

type grpcServerClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcServerClient(cc grpc.ClientConnInterface) GrpcServerClient {
	return &grpcServerClient{cc}
}

func (c *grpcServerClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, "/domain.GrpcServer/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcServerServer is the server API for GrpcServer service.
// All implementations must embed UnimplementedGrpcServerServer
// for forward compatibility
type GrpcServerServer interface {
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	mustEmbedUnimplementedGrpcServerServer()
}

// UnimplementedGrpcServerServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcServerServer struct {
}

func (UnimplementedGrpcServerServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedGrpcServerServer) mustEmbedUnimplementedGrpcServerServer() {}

// UnsafeGrpcServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcServerServer will
// result in compilation errors.
type UnsafeGrpcServerServer interface {
	mustEmbedUnimplementedGrpcServerServer()
}

func RegisterGrpcServerServer(s grpc.ServiceRegistrar, srv GrpcServerServer) {
	s.RegisterService(&GrpcServer_ServiceDesc, srv)
}

func _GrpcServer_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServerServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.GrpcServer/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServerServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcServer_ServiceDesc is the grpc.ServiceDesc for GrpcServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "domain.GrpcServer",
	HandlerType: (*GrpcServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _GrpcServer_CreateAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "profile/profile.proto",
}
